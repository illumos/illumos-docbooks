<?Pub UDT _bookmark _target?><preface id="preface"><title>Preface</title><highlights><para>DTrace is a comprehensive dynamic tracing framework for the illumos&trade;
Operating System. DTrace provides a powerful infrastructure to permit administrators,
developers, and service personnel to concisely answer arbitrary questions
about the behavior of the operating system and user programs. The <citetitle>illumos
Dynamic Tracing Guide</citetitle> describes how to use DTrace to observe,
debug, and tune system behavior. This book also includes a complete reference
for bundled DTrace observability tools and the D programming language.</para>
<note><para>This illumos release supports systems that use the <trademark class="registered">SPARC</trademark> and x86 families of processor architectures: <trademark class="registered">UltraSPARC</trademark>, SPARC64, AMD64, Pentium, and Xeon
EM64T. The supported systems appear in the <citetitle>illumos Hardware
Compatibility List</citetitle> at <ulink url="http://www.illumos.org/hcl/" type="text">http://www.illumos.org/hcl/</ulink>. This document cites
any implementation differences between the platform types.</para><para>In
this document the term &ldquo;x86&rdquo; refers to 64&ndash;bit and 32&ndash;bit
systems manufactured using processors compatible with the AMD64 or Intel Xeon/Pentium
product families. For supported systems, see the <citetitle>illumos Hardware
Compatibility List</citetitle>.</para>
</note>
</highlights><sect1 id="preface-9"><title id="preface-2">Who Should Use This Book</title><para>If you have ever wanted to understand the behavior of your system, DTrace
is the tool for you. DTrace is a comprehensive dynamic tracing facility that
is built into illumos. The DTrace facility can be used to examine the behavior
of user programs. The DTrace facility can also be used to examine the behavior
of the operating system. DTrace can be used by system administrators or application
developers, and is suitable for use with live production systems. DTrace will
allow you to explore your system to understand how it works, track down performance
problems across many layers of software, or locate the cause of aberrant behavior.
As you'll see, DTrace lets you create your own custom programs to dynamically
instrument the system and provide immediate, concise answers to arbitrary
questions you can formulate using the DTrace D programming language.</para><para>DTrace allows all illumos users to:</para><itemizedlist><listitem><para>Dynamically enable and manage thousands of probes</para>
</listitem><listitem><para>Dynamically associate logical predicates and actions with
probes</para>
</listitem><listitem><para>Dynamically manage trace buffers and buffer policies</para>
</listitem><listitem><para>Display and examine trace data from the live system or a crash
dump</para>
</listitem>
</itemizedlist><para>DTrace allows illumos developers and administrators to:</para><itemizedlist><listitem><para>Implement custom scripts that use the DTrace facility</para>
</listitem><listitem><para>Implement layered tools that use DTrace to retrieve trace
data</para>
</listitem>
</itemizedlist><para>This guide will teach you everything you need to know about using DTrace.
Basic familiarity with a programming language such as C or a scripting language
such as <olink targetdoc="refman1" targetptr="awk-1" remap="external"><citerefentry><refentrytitle>awk</refentrytitle><manvolnum>1</manvolnum></citerefentry></olink> or <olink targetdoc="refman1" targetptr="perl-1" remap="external"><citerefentry><refentrytitle>perl</refentrytitle><manvolnum>1</manvolnum></citerefentry></olink> will help you learn DTrace
and the D programming language faster, but you need not be an expert in any
of these areas. If you have never written a program or script before in any
language, <olink targetptr="preface-5" remap="internal">Related Information</olink> provides
references to other documents you might find useful.</para>
</sect1><sect1 id="preface-4"><title>How This Book Is Organized</title><para><olink targetptr="chp-intro" remap="internal">Chapter&nbsp;1, Introduction</olink> provides
a whirlwind tour of the entire DTrace facility and introduces readers to the
D programming language. <olink targetptr="chp-typeopexpr" remap="internal">Chapter&nbsp;2,
Types, Operators, and Expressions</olink>, <olink targetptr="chp-variables" remap="internal">Chapter&nbsp;3,
Variables</olink>, and <olink targetptr="chp-prog" remap="internal">Chapter&nbsp;4, D Program
Structure</olink> then discuss the fundamentals of D in greater detail, and
explain how D programs are converted into dynamic instrumentation. This initial
group of chapters should be read first by all readers.</para><para><olink targetptr="chp-pointers" remap="internal">Chapter&nbsp;5, Pointers and Arrays</olink>, <olink targetptr="chp-strings" remap="internal">Chapter&nbsp;6, Strings</olink>, <olink targetptr="chp-structs" remap="internal">Chapter&nbsp;7, Structs and Unions</olink>, and <olink targetptr="chp-types" remap="internal">Chapter&nbsp;8, Type and Constant Definitions</olink> discuss
the remaining D language features, most of which will be familiar already
to C, C++, and <trademark>Java</trademark> programmers. Readers who are unfamiliar
with any of these languages should read these chapters; more experienced programmers
may wish to proceed directly to later chapters.</para><para><olink targetptr="chp-aggs" remap="internal">Chapter&nbsp;9, Aggregations</olink> and <olink targetptr="chp-actsub" remap="internal">Chapter&nbsp;10, Actions and Subroutines</olink> discuss
DTrace's powerful primitive for <firstterm>aggregating</firstterm> data and
the set of built-in actions that can be used to build tracing experiments.
All readers should carefully read these chapters.</para><para><olink targetptr="chp-buf" remap="internal">Chapter&nbsp;11, Buffers and Buffering</olink> describes
the DTrace policies for buffering data and how these can be configured. This
chapter should be read by users once they are familiar with constructing and
running D programs.</para><para><olink targetptr="chp-fmt" remap="internal">Chapter&nbsp;12, Output Formatting</olink> describes
the D output formatting actions as well as the default policy for formatting
trace data. Readers who are familiar with the C <function>printf</function> function
can rapidly skim this chapter. Readers who have never seen <function>printf</function> before
should read this chapter carefully.</para><para><olink targetptr="chp-spec" remap="internal">Chapter&nbsp;13, Speculative Tracing</olink> discusses
the DTrace facility for <firstterm>speculatively</firstterm> committing data
to a trace buffer. This chapter should be read by users who need to use DTrace
in a situation where data must be traced prior to understanding whether it
is relevant to the question at hand.</para><para><olink targetptr="chp-dtrace1m" remap="internal">Chapter&nbsp;14, dtrace(1M) Utility</olink> provides
a complete reference for the <command>dtrace</command> command-line utility,
similar to the corresponding on-line manual page. Readers may wish to refer
to this chapter when various command-line options are presented elsewhere
in the book. <olink targetptr="chp-script" remap="internal">Chapter&nbsp;15, Scripting</olink> then
discusses how the <command>dtrace</command> utility can be used to construct
executable D scripts and process their command-line arguments, and <olink targetptr="chp-opt" remap="internal">Chapter&nbsp;16, Options and Tunables</olink> describes
the options that can be tuned on the command-line or from within a D program
itself.</para><para>The group of chapters beginning with <olink targetptr="chp-dtrace" remap="internal">Chapter&nbsp;17,
dtrace Provider</olink> and ending with <olink targetptr="chp-fasttrap" remap="internal">Chapter&nbsp;32,
fasttrap Provider</olink> discuss the various DTrace <firstterm>providers</firstterm> that
can be used to instrument various aspects of the illumos system. All readers
should skim these chapters to familiarize themselves with the various providers,
and then return back to read particular chapters in detail as needed.</para><para><olink targetptr="chp-user" remap="internal">Chapter&nbsp;33, User Process Tracing</olink> discusses
examples of using DTrace to instrument user processes. <olink targetptr="chp-usdt" remap="internal">Chapter&nbsp;34, Statically Defined Tracing for User
Applications</olink> describes how application programmers can add customized
DTrace providers and probes to user applications. Readers who are user program
developers or administrators and wish to use DTrace to investigate user process
behavior should read these chapters.</para><para><olink targetptr="chp-sec" remap="internal">Chapter&nbsp;35, Security</olink> and the
remaining chapters discuss advanced topics such as security, versioning, and
stability attributes of DTrace, and how to perform boot-time and post-mortem
tracing with DTrace. These chapters are intended for advanced DTrace users.</para>
</sect1><sect1 id="preface-5"><title>Related Information</title><para>These books and papers are recommended and related to the tasks that
you need to perform with DTrace:</para><itemizedlist><listitem><para>Kernighan, Brian W. and Ritchie, Dennis M. <citetitle>The
C Programming Language</citetitle>. Prentice Hall, 1988. ISBN 0&ndash;13&ndash;110370&ndash;9</para>
</listitem><listitem><para>Vahalia, Uresh. <citetitle>UNIX Internals: The New Frontiers</citetitle>.
Prentice Hall, 1996. ISBN 0-13-101908-2</para>
</listitem><listitem><para>Mauro, Jim and McDougall, Richard. <citetitle>Solaris Internals:
Core Kernel Components</citetitle>. Sun Microsystems Press, 2001. ISBN 0-13-022496-0</para>
</listitem>
<listitem><para>Gregg, Brendan and Mauro, Jim. <citetitle>DTrace:
Dynamic Tracing in Oracle Solaris, Mac OS X and FreeBSD</citetitle>.
Prentice Hall, 2011. ISBN 0-13-209151-8</para></listitem>
</itemizedlist><para>You can share your DTrace experiences and scripts with the rest of the
DTrace community on the DTrace discussion mailing list at <ulink url="http://dtrace.org/blogs/mailing-list/" type="text">http://dtrace.org/blogs/mailing-list/</ulink>.</para>
</sect1>&sundocs;&typeconv;
</preface><?Pub *0000009997 0?>
