<chapter xml:id="chp-prog">
<title>D Program Structure</title>
<para><phrase role="first-word">D programs consist</phrase> of a set of clauses
that describe probes to enable and predicates and actions to bind to these
probes. D programs can also contain declarations of variables, as described in
<xref linkend="chp-variables" />, and definitions of new types, described in
<xref linkend="chp-types" />. This chapter formally describes the overall
structure of a D program and features for constructing probe descriptions that
match more than one probe. We'll also discuss the use of the C preprocessor,
<command>cpp</command>, with D programs.</para>
<sect1 xml:id="chp-prog-1">
<title>Probe Clauses and Declarations</title>
<para><indexterm><primary>probe clauses</primary></indexterm>As shown in our examples so far, a D program source file consists of one or more probe clauses that describe the instrumentation to be enabled by DTrace. Each probe clause has the general form:</para>
<literallayout><replaceable>probe descriptions</replaceable>
<literal>/</literal> <replaceable>predicate</replaceable> <literal>/</literal>
<literal>{</literal>
	<replaceable>action statements</replaceable>
	<literal>}</literal></literallayout><para><indexterm><primary>declarations</primary></indexterm>The predicate and list of action statements may be omitted. Any directives found outside probe clauses are referred to as <firstterm>declarations</firstterm>. Declarations may only be used outside of probe clauses. No declarations inside of the enclosing <literal>{ }</literal> are permitted and declarations may not be interspersed between the elements of the probe clause shown above. Whitespace can be used to separate any D program elements and to indent action statements.</para><para><indexterm><primary>pragmas</primary></indexterm>Declarations can be used to declare D variables and external C symbols as discussed in <xref linkend="chp-variables" />, or to define new types for use in D, as described in <xref linkend="chp-types" />. Special D compiler directives called <firstterm>pragmas</firstterm> may also appear anywhere in a D program, including outside of probe clauses. D pragmas are specified on lines beginning with a <literal>#</literal> character. D pragmas are used, for example, to set run-time DTrace options; see <xref linkend="chp-opt" /> for details.</para>
</sect1>
<sect1 xml:id="chp-prog-2">
<title>Probe Descriptions</title>
<para><indexterm><primary>probe descriptions</primary></indexterm>Every D program clause begins with a list of one or more probe descriptions, each taking the usual form:</para>
<para><replaceable>provider</replaceable>:<replaceable>module</replaceable>:<replaceable>function</replaceable>:<replaceable>name</replaceable></para>
<para>If one or more fields of the probe description are omitted, the specified fields are interpreted from right to left by the D compiler. For example, the probe description <literal>foo:bar</literal> would match a probe with function <literal>foo</literal> and name <literal>bar</literal> regardless of the value of the probe's provider and module fields. Therefore, a probe description is really more accurately viewed as a <firstterm>pattern</firstterm> that can be used to match one or more probes based on their names.</para>
<para><indexterm><primary>probe descriptions</primary><secondary>recommended syntax</secondary></indexterm>You should write your D probe descriptions specifying all four field delimiters so that you can specify the desired <firstterm>provider</firstterm> on the left-hand side. If you don't specify the provider, you might obtain unexpected results if multiple providers publish probes with the same name. Similarly, future versions of DTrace might include new providers whose probes unintentionally match your partially specified probe descriptions. You can specify a provider but match any of its probes by leaving any of the module, function, and name fields blank. For example, the description <literal>syscall:::</literal> can be used to match every probe published by the DTrace <literal>syscall</literal> provider.</para>
<para><indexterm><primary>probe descriptions</primary><secondary>special characters in</secondary></indexterm>Probe descriptions also support a pattern matching syntax similar to the shell <firstterm>globbing</firstterm> pattern matching syntax described in <citerefentry><refentrytitle>sh</refentrytitle><manvolnum>1</manvolnum></citerefentry>. Before matching a probe to a description, DTrace scans each description field for the characters <literal>*</literal>, <literal>?</literal>, and <literal>[</literal>. If one of these characters appears in a probe description field and is not preceded by a <literal>\</literal>, the field is regarded as a pattern. The description pattern must match the entire corresponding field of a given probe. The complete probe description must match on every field in order to successfully match and enable a probe. A probe description field that is not a pattern must exactly match the corresponding field of the probe. A description field that is empty matches any probe.</para>
<para>The special characters in the following table are recognized in probe name patterns:</para>
<table frame="topbot" xml:id="tbl-glob">
<title>Probe Name Pattern Matching Characters</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="colspec0" colwidth="1*" />
<colspec colname="colspec1" colwidth="2.5*" align="justify" />
<thead>
	<row>
		<entry colname="colspec0" rowsep="1" valign="top"><para>Symbol</para></entry>
		<entry colname="colspec1" rowsep="1" valign="top"><para>Description</para></entry>
	</row>
</thead>
<tbody valign="top">
	<row>
		<entry><para><literal>*</literal></para></entry>
		<entry><para>Matches any string, including the null string.</para></entry>
	</row>
	<row>
		<entry><para><literal>?</literal></para></entry>
		<entry><para>Matches any single character.</para></entry>
	</row>
	<row>
		<entry><para><literal>[ ... ]</literal></para></entry>
		<entry><para>Matches any one of the enclosed characters. A pair of characters separated by <literal>-</literal> matches any character between the pair, inclusive. If the first character after the <literal>[</literal> is <literal>!</literal>, any character not enclosed in the set is matched.</para></entry>
	</row>
	<row>
		<entry><para><literal>\</literal></para></entry>
		<entry><para>Interpret the next character as itself, without any special meaning.</para></entry>
	</row>
</tbody>
</tgroup>
</table>
<para>Pattern match characters can be used in any or all of the four fields of your probe descriptions. You
can also use patterns to list matching probes by using the patterns on the command line with
<command>dtrace</command> <option>l</option>. For example, the command <command>dtrace -l -f kmem_*</command>
lists all DTrace probes in functions whose names begin with the prefix <literal>kmem_</literal>.</para>
<para>If you want to specify the same predicate and actions for more than one probe description or description
pattern, you can place the descriptions in a comma-separated list. For example, the following D program would
trace a timestamp each time probes associated with entry to system calls containing the words
&ldquo;<literal>lwp</literal>&rdquo; or &ldquo;<literal>sock</literal>&rdquo; fire:</para>
<programlisting>syscall::*lwp*:entry, syscall::*sock*:entry
{
	trace(timestamp);
}</programlisting>
<para>A probe description may also specify a probe using its integer probe ID. For example, the clause:</para>
<programlisting>12345
{
	trace(timestamp);
}</programlisting>
<para>could be used to enable probe ID 12345, as reported by <command>dtrace -l -i 12345</command>.
You should always write your D programs using human-readable probe descriptions. Integer probe IDs
are not guaranteed to remain consistent as DTrace provider kernel modules are loaded and unloaded or
following a reboot.</para>
</sect1>
<sect1 xml:id="chp-prog-pred">
<title>Predicates</title>
<para><indexterm><primary>predicates</primary></indexterm>Predicates are expressions enclosed in
slashes <literal>/ /</literal> that are evaluated at probe firing time to determine whether the
associated actions should be executed. Predicates are the primary conditional construct used for
building more complex control flow in a D program. You can omit the predicate section of the probe
clause entirely for any probe, in which case the actions are always executed when the probe
fires.</para>
<para>Predicate expressions can use any of the previously described D operators and may refer to any
D data objects such as variables and constants. The predicate expression must evaluate to a value of
integer or pointer type so that it can be considered as true or false. As with all D expressions, a
zero value is interpreted as false and any non-zero value is interpreted as true.</para>
</sect1>
<sect1 xml:id="chp-prog-4">
<title>Actions</title>
<para><indexterm><primary>probe actions</primary></indexterm>Probe actions are described by a list of statements separated by semicolons (<literal>;</literal>) and enclosed in braces <literal>{ }</literal>. If you only want to note that a particular probe fired on a particular CPU without tracing any data or performing any additional actions, you can specify an empty set of braces with no statements inside.</para>
</sect1>
<sect1 xml:id="chp-prog-5">
<title>Use of the C Preprocessor</title>
<para><indexterm><primary>C preprocessor</primary><secondary>and the D programming language</secondary></indexterm><indexterm><primary>D programming language</primary><secondary>and the C preprocessor</secondary></indexterm>The C programming language used for defining illumos system interfaces includes a <firstterm>preprocessor</firstterm> that performs a set of initial steps in C program compilation. The C preprocessor is commonly used to define macro substitutions where one token in a C program is replaced with another predefined set of tokens, or to include copies of system header files. You can use the C preprocessor in conjunction with your D programs by specifying the <command>dtrace</command> <option>C</option> option. This option causes <command>dtrace</command> to first execute the <citerefentry><refentrytitle>cpp</refentrytitle><manvolnum>1</manvolnum></citerefentry> preprocessor on your program source file and then pass the results to the D compiler. The C preprocessor is described in more detail in <citetitle>The C Programming Language</citetitle>.</para>
<para>The D compiler automatically loads the set of C type descriptions associated with the operating system implementation, but you can use the preprocessor to include other type definitions such as types used in your own C programs. You can also use the preprocessor to perform other tasks such as creating macros that expand to chunks of D code and other program elements. If you use the preprocessor with your D program, you may only include files that contain valid D declarations. Typical C header files include only external declarations of types and symbols, which will be correctly interpreted by the D compiler. The D compiler cannot parse C header files that include additional program elements like C function source code and will produce an appropriate error message.</para>
</sect1>
</chapter>
