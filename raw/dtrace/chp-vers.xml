<chapter xml:id="chp-vers">
<title>Versioning</title>
<para><phrase role="first-word">We learned</phrase> about the DTrace features
for determining the stability attributes of D programs that you create in
<xref linkend="chp-stab" />. Once you have created a D program with the
appropriate stability attributes, you may also wish to bind this program to a
particular <firstterm>version</firstterm> of the D programming interface. The D
interface version is a label applied to a particular set of types, variables,
functions, constants, and translators made available to you by the D compiler.
If you specify a binding to a specific version of the D programming interface,
you ensure that you can recompile your program on future versions of DTrace
without encountering conflicts between program identifiers that you define and
identifiers defined in future versions of the D programming interface. You
should establish version bindings for any D programs that you wish to install as
persistent scripts (see <xref linkend="chp-script" />) or use in layered
tools.</para>
<sect1 xml:id="chp-vers-1">
<title>Versions and Releases</title>
<para><indexterm><primary>version string</primary></indexterm><indexterm><primary>versioning</primary></indexterm>The D compiler labels sets of types, variables, functions, constants, and translators corresponding to a particular software release using a <firstterm>version string</firstterm>. A version string is a period-delimited sequence of decimal integers of the form &ldquo;<replaceable>x</replaceable>&rdquo; (a Major release), &ldquo;<replaceable>x.y</replaceable>&rdquo; (a Minor release), or &ldquo;<replaceable>x.y.z</replaceable>&rdquo; (a Micro release). Versions are compared by comparing the integers from left to right. If the leftmost integers are not equal, the string with the greater integer is the greater (and therefore more recent) version. If the leftmost integers are equal, the comparison proceeds to the next integer in order from left to right to determine the result. All unspecified integers in a version string are interpreted as having the value zero during a version comparison.</para>
<para>The DTrace version strings correspond to Sun's standard nomenclature for interface versions, as described in <citerefentry><refentrytitle>attributes</refentrytitle><manvolnum>5</manvolnum></citerefentry>. A change in the D programming interface is accompanied by a new version string. The following table summarizes the version strings used by DTrace and the likely significance of the corresponding DTrace software release.</para>
<table frame="topbot" xml:id="tbl-vers">
<title>DTrace Release Versions</title>
<tgroup cols="3" colsep="0" rowsep="0">
<colspec colname="colspec1" colwidth="1*" />
<colspec colname="colspec2" colwidth="1*" />
<colspec colname="colspec0" colwidth="8*" align="justify" />
<thead>
	<row rowsep="1">
		<entry><para>Release</para></entry>
		<entry><para>Version</para></entry>
		<entry colname="colspec0"><para>Significance</para></entry>
	</row>
</thead>
<tbody valign="top">
	<row>
		<entry><para>Major</para></entry>
		<entry><para><replaceable>x</replaceable>.0</para></entry>
		<entry colname="colspec0"><para>A Major release is likely to contain major feature additions; adhere to different, possibly incompatible Standard revisions; and though unlikely, could change, drop, or replace Standard or Stable interfaces (see <xref linkend="chp-stab" />). The initial version of the D programming interface is labeled as version 1.0.</para></entry>
	</row>
	<row>
		<entry colname="colspec1"><para>Minor</para></entry>
		<entry colname="colspec2"><para><replaceable>x.y</replaceable></para></entry>
		<entry colname="colspec0"><para>Compared to an <replaceable>x</replaceable>.0 or earlier version (where y is not equal to zero), a new Minor release is likely to contain minor feature additions, compatible Standard and Stable interfaces, possibly incompatible Evolving interfaces, or likely incompatible Unstable interfaces. These changes may include new built-in D types, variables, functions, constants, and translators. In addition, a Minor release may remove support for interfaces previously labeled as Obsolete (see <xref linkend="chp-stab" />).</para></entry>
	</row>
	<row>
		<entry colname="colspec1"><para>Micro</para></entry>
		<entry colname="colspec2"><para><replaceable>x.y.z</replaceable></para></entry>
		<entry colname="colspec0"><para>Micro releases are intended to be interface compatible with the previous release (where z is not equal to zero), but are likely to include bug fixes, performance enhancements, and support for additional hardware.</para></entry>
	</row>
</tbody>
</tgroup>
</table><para>In general, each new version of the D programming interface will provide a superset of the capabilities offered by the previous version, with the exception of any Obsolete interfaces that have been removed.</para>
</sect1>
<sect1 xml:id="chp-vers-2">
<title>Versioning Options</title>
<para><indexterm><primary>versioning</primary><secondary>options</secondary></indexterm>By default, any D programs you compile using <command>dtrace</command> <option>s</option> or specify using the <command>dtrace</command> <option>P</option>, <option>m</option>, <option>f</option>, <option>n</option>, or <option>i</option> command-line options are bound to the most recent D programming interface version offered by the D compiler. You can determine the current D programming interface version using the <command>dtrace</command> <option>V</option> option:</para>
<screen><userinput>$ dtrace -V</userinput>
dtrace: Sun D 1.0
$</screen>
<para>If you wish to establish a binding to a specific version of the D programming interface, you can set the <literal>version</literal> option to an appropriate version string. Similar to other DTrace options (see <xref linkend="chp-opt" />), you can set the version option either on the command-line using <command>dtrace</command> <option>x</option>:</para>
<screen><userinput># dtrace -x version=1.0 -n 'BEGIN{trace("hello");}'</userinput></screen>
<para>or you can use the <literal>#pragma D option</literal> syntax to set the option in your D program source file:</para>
<programlisting>#pragma D option version=1.0

BEGIN
{
	trace("hello");
}</programlisting>
<para><indexterm><primary>versioning</primary><secondary>version binding</secondary></indexterm>If you use the <literal>#pragma D option</literal> syntax to request a version binding, you must place this directive at the top of your D program file prior to any other declarations and probe clauses. If the version binding argument is not a valid version string or refers to a version not offered by the D compiler, an appropriate error message will be produced and compilation will fail. You can therefore also use the version binding facility to cause execution of a D script on an <emphasis>older</emphasis> version of DTrace to fail with an obvious error message.</para>
<para>Prior to compiling your program declarations and clauses, the D compiler loads the set of D types, functions, constants, and translators for the appropriate interface version into the compiler namespaces. Therefore, any version binding options you specify simply control the set of identifiers, types, and translators that are visible to your program in addition to the variables, types, and translators that your program defines. Version binding prevents the D compiler from loading newer interfaces that may define identifiers or translators that conflict with declarations in your program source code and would therefore cause a compilation error. See <xref linkend="chp-typeopexpr-1" /> for tips on how to pick identifier names that are unlikely to conflict with interfaces offered by future versions of DTrace.</para>
</sect1>
<sect1 xml:id="chp-vers-3">
<title>Provider Versioning</title>
<para><indexterm><primary>provider versioning</primary></indexterm><indexterm><primary>versioning</primary><secondary>for providers</secondary></indexterm>Unlike interfaces offered by the D compiler, interfaces offered by DTrace providers (that is, probes and probe arguments) are not affected by or associated with the D programming interface or the previously described version binding options. The available provider interfaces are established as part of loading your compiled instrumentation into the DTrace software in the operating system kernel and vary depending on your instruction set architecture, operating platform, processor, the software installed on your illumos system, and your current security privileges. The D compiler and DTrace runtime examine the probes described in your D program clauses and report appropriate error messages when probes requested by your D program are not available. These features are orthogonal to the D programming interface version because DTrace providers do not export interfaces that can conflict with definitions in your D programs; that is, you can only enable probes in D, you cannot define them, and probe names are kept in a separate namespace from other D program identifiers.</para>
<para>DTrace providers are delivered with a particular release of illumos and are described in the corresponding version of the illumos Dynamic Tracing Guide. The chapter of this guide corresponding to each provider will also describe any relevant changes to or new features offered by a given provider. You can use the <command>dtrace</command> <option>l</option> option to explore the set of providers and probes available on your illumos system. Providers label their interfaces using the DTrace stability attributes, and you can use the DTrace stability reporting features (see <xref linkend="chp-stab" />) to determine whether the provider interfaces used by your D program are likely to change or be offered in future illumos releases.</para>
</sect1>
</chapter>
