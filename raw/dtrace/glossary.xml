<glossary xml:id="gloss01">
<title>Glossary</title>
<glossentry>
	<glossterm>action</glossterm>
	<glossdef><para>A behavior implemented by the DTrace framework that can be performed at probe firing time that either traces data or modifies system state external to DTrace. Actions include tracing data, stopping processes, and capturing stack traces, among others.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>aggregation</glossterm>
	<glossdef><para>An object that stores the result of an <firstterm>aggregating function</firstterm> as defined formally in <xref linkend="chp-aggs" />, indexed by a tuple of expressions that can be used to organize the results.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>clause</glossterm>
	<glossdef><para>A D program declaration consisting of a probe specifier list, an optional predicate, and an optional list of action statements surrounded by braces <literal>{ }</literal>.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>consumer</glossterm>
	<glossdef><para>A program that uses DTrace to enable instrumentation and reads out the resulting stream of trace data. The <command>dtrace</command> command is the canonical DTrace consumer; the <citerefentry><refentrytitle>lockstat</refentrytitle><manvolnum>1M</manvolnum></citerefentry> utility is another specialized DTrace consumer.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>DTrace</glossterm>
	<glossdef><para>A dynamic tracing facility that provides concise answers to arbitrary questions.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>enabling</glossterm>
	<glossdef><para>A group of enabled probes and their associated predicates and actions.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>predicate</glossterm><glossdef><para>A logical expression that determines whether or not a set of tracing actions should be executed when a probe fires. Each D program clause may have a predicate associated with it, surrounded by slashes <literal>/ /</literal>.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>probe</glossterm>
	<glossdef><para>A location or activity in the system to which DTrace can dynamically bind instrumentation including a predicate and actions. Each probe is named by a tuple indicating its provider, module, function, and semantic name. A probe may be <emphasis>anchored</emphasis> to a particular module and function, or it may be <emphasis>unanchored</emphasis> if it is not associated with a particular program location (for example, a <literal>profile</literal> timer).</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>provider</glossterm>
	<glossdef><para>A kernel module that implements a particular type of instrumentation on behalf of the DTrace framework. The provider exports a namespace of probes and a stability matrix for its name and data semantics, as shown in the chapters of this book.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>subroutine</glossterm>
	<glossdef><para>A behavior implemented by the DTrace framework that can be performed at probe firing time that modifies internal DTrace state but does not trace any data. Similar to actions, subroutines are requested using the D function call syntax.</para></glossdef>
</glossentry>
<glossentry>
	<glossterm>translator</glossterm>
	<glossdef><para>A collection of D assignment statements that convert implementation details of a particular instrumented subsystem into a object of <literal>struct</literal> type that forms an interface of greater stability than the input expression.</para></glossdef>
</glossentry>
</glossary>
