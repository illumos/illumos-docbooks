<chapter xml:id="chp-syscall">
<title><literal>syscall</literal> Provider</title>
<para><phrase role="first-word">The</phrase> <literal>syscall</literal> provider makes available a probe at the
entry to and return from every system call in the system. Because system calls
are the primary interface between user-level applications and the operating
system kernel, the <literal>syscall</literal> provider can offer tremendous
insight into application behavior with respect to the system.</para>
<sect1 xml:id="chp-syscall-1">
<title>Probes</title>
<para><indexterm><primary><literal>syscall</literal> probe</primary></indexterm><indexterm><primary>probes</primary><secondary><literal>syscall</literal></secondary></indexterm><literal>syscall</literal> provides a pair of probes for each
system call: an <literal>entry</literal> probe that fires before the system
call is entered, and a <literal>return</literal> probe that fires after the
system call has completed but before control has transferred back to user-level.
For all <literal>syscall</literal> probes, the function name is set to be
the name of the instrumented system call and the module name is undefined.</para><para>The names of the system calls as provided by the <literal>syscall</literal> provider
may be found in the <filename>/etc/name_to_sysnum</filename> file. Often,
the system call names provided by <literal>syscall</literal> correspond to
names in Section 2 of the manual pages. However, some probes provided by the <literal>syscall</literal> provider do not directly correspond to any documented system
call. The common reasons for this discrepancy are described in
this section.</para>
<sect2 xml:id="chp-syscall-2">
<title>System Call Anachronisms</title>
<para>In some cases, the name of the system call as provided by the <literal>syscall</literal> provider is actually a reflection of an ancient implementation
detail. For example, for reasons dating back to <trademark>UNIX</trademark> antiquity,
the name of <citerefentry><refentrytitle>exit</refentrytitle><manvolnum>2</manvolnum></citerefentry> in <literal>/etc/name_to_sysnum</literal> is <literal>rexit</literal>. Similarly, the
name of <citerefentry><refentrytitle>time</refentrytitle><manvolnum>2</manvolnum></citerefentry> is <literal>gtime</literal>, and the name of both <citerefentry><refentrytitle>execle</refentrytitle><manvolnum>2</manvolnum></citerefentry> and <citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry> is <literal>exece</literal>.</para>
</sect2>
<sect2 xml:id="chp-syscall-3">
<title>Subcoded System Calls</title>
<para>Some system calls as presented in Section 2 are implemented as suboperations
of an undocumented system call. For example, the system calls related to System
V semaphores (<citerefentry><refentrytitle>semctl</refentrytitle><manvolnum>2</manvolnum></citerefentry>, <citerefentry><refentrytitle>semget</refentrytitle><manvolnum>2</manvolnum></citerefentry>, <citerefentry><refentrytitle>semids</refentrytitle><manvolnum>2</manvolnum></citerefentry>, <citerefentry><refentrytitle>semop</refentrytitle><manvolnum>2</manvolnum></citerefentry>, and <citerefentry><refentrytitle>semtimedop</refentrytitle><manvolnum>2</manvolnum></citerefentry>) are implemented as suboperations
of a single system call, <literal>semsys</literal>. The <literal>semsys</literal> system
call takes as its first argument an implementation-specific <emphasis>subcode</emphasis> denoting
the specific system call required: <literal>SEMCTL</literal>, <literal>SEMGET</literal>, <literal>SEMIDS</literal>, <literal>SEMOP</literal> or <literal>SEMTIMEDOP</literal>,
respectively. As a result of overloading a single system call to implement
multiple system calls, there is only a single pair of syscall probes for System
V semaphores: <literal>syscall::semsys:entry</literal> and <literal>syscall::semsys:return</literal>.</para>
</sect2>
<sect2 xml:id="chp-syscall-4">
<title>Large File System Calls</title>
<para><indexterm><primary><literal>syscall</literal> probes</primary><secondary>large file system interfaces</secondary></indexterm><indexterm><primary>system calls</primary><secondary>for large files</secondary></indexterm><indexterm><primary>large file system calls</primary></indexterm>A 32-bit program that supports <emphasis>large
files</emphasis> that exceed four gigabytes in size must be able to process
64&ndash;bit file offsets. Because large files require use of large offsets,
large files are manipulated through a parallel set of system interfaces, as
described in <citerefentry><refentrytitle>lf64</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
These interfaces are documented in <literal>lf64</literal>, but they do not
have individual manual pages. Each of these large file system call interfaces
appears as its own <literal>syscall</literal> probe as shown in <xref linkend="tbl-syscall" />.</para>
<table frame="topbot" xml:id="tbl-syscall">
<title><literal>syscall</literal> Large File Probes</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colname="colspec0" colwidth="1*" />
<colspec colname="colspec1" colwidth="1*" />
<thead>
	<row>
		<entry colname="colspec0" rowsep="1" valign="top"><para>Large File <literal>syscall</literal> Probe</para></entry>
		<entry colname="colspec1" rowsep="1" valign="top"><para>System Call</para></entry>
	</row>
</thead>
<tbody>
	<row>
		<entry colname="colspec0"><para><literal>creat64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>creat</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>fstat64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>fstat</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>fstatvfs64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>fstatvfs</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>getdents64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>getdents</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>getrlimit64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>getrlimit</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>lstat64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>lstat</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>mmap64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>mmap</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>open64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>open</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>pread64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>pread</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>pwrite64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>pwrite</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>setrlimit64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>setrlimit</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>stat64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
	<row>
		<entry colname="colspec0"><para><literal>statvfs64</literal></para></entry>
		<entry colname="colspec1"><para><citerefentry><refentrytitle>statvfs</refentrytitle><manvolnum>2</manvolnum></citerefentry></para></entry>
	</row>
</tbody>
</tgroup>
</table>
</sect2>
<sect2 xml:id="chp-syscall-5">
<title>Private System Calls</title>
<para>Some system calls are private implementation details of illumos subsystems
that span the user-kernel boundary. As such, these system calls do not have
manual pages in Section 2. Examples of system calls in this category include
the <literal>signotify</literal> system call, which is used as part of the
implementation of POSIX.4 message queues, and the <literal>utssys</literal> system
call, which is used to implement <citerefentry><refentrytitle>fuser</refentrytitle><manvolnum>1M</manvolnum></citerefentry>.</para>
</sect2>
</sect1>
<sect1 xml:id="chp-syscall-6">
<title>Arguments</title>
<para><indexterm><primary><literal>syscall</literal> probes</primary><secondary>arguments</secondary></indexterm>For <literal>entry</literal> probes, the arguments
(<literal>arg0</literal> .. <literal>arg</literal><replaceable>n</replaceable><literal></literal>)
are the arguments to the system call. For <literal>return</literal> probes,
both <literal>arg0</literal> and <literal>arg1</literal> contain the return
value. A non-zero value in the D variable <literal>errno</literal> indicates
system call failure.</para>
</sect1>
<sect1 xml:id="chp-syscall-stability">
<title>Stability</title>
<para><indexterm><primary>stability</primary><secondary>of <literal>syscall</literal> probes</secondary></indexterm><indexterm><primary><literal>syscall</literal> probes</primary><secondary>stability</secondary></indexterm>The <literal>syscall</literal> provider
uses DTrace's stability mechanism to describe its stabilities as shown in
the following table. For more information about the stability mechanism, refer
to <xref linkend="chp-stab" />.</para>
<informaltable frame="topbot">
<tgroup cols="4" colsep="0" rowsep="0">
	<colspec colwidth="25*" />
	<colspec colwidth="25*" />
	<colspec colwidth="25*" />
	<colspec colwidth="25*" />
	<thead>
		<row rowsep="1">
			<entry colsep="1"><para>Element</para></entry>
			<entry><para>Name stability</para></entry>
			<entry><para>Data stability</para></entry>
			<entry><para>Dependency class</para></entry>
		</row>
	</thead>
	<tbody>
		<row>
			<entry colsep="1"><para>Provider</para></entry>
			<entry><para>Evolving</para></entry>
			<entry><para>Evolving</para></entry>
			<entry><para><acronym>Common</acronym></para></entry>
		</row>
		<row>
			<entry colsep="1"><para>Module</para></entry>
			<entry><para>Private</para></entry>
			<entry><para>Private</para></entry>
			<entry><para>Unknown</para></entry>
		</row>
		<row>
			<entry colsep="1"><para>Function</para></entry>
			<entry><para>Unstable</para></entry>
			<entry><para>Unstable</para></entry>
			<entry><para>ISA</para></entry>
		</row>
		<row>
			<entry colsep="1"><para>Name</para></entry>
			<entry><para>Evolving</para></entry>
			<entry><para>Evolving</para></entry>
			<entry><para><acronym>Common</acronym></para></entry>
		</row>
		<row>
			<entry colsep="1"><para>Arguments</para></entry>
			<entry><para>Unstable</para></entry>
			<entry><para>Unstable</para></entry>
			<entry><para><acronym>ISA</acronym></para></entry>
		</row>
	</tbody>
</tgroup>
</informaltable>
</sect1>
</chapter>
