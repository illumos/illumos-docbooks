<chapter xml:id="chp-vms">
<title>Tracing Hardware Virtual Machines</title>
<para><phrase role="first-word">Traditionally</phrase>, understanding what is
going on inside of a Hardware Virtual Machine has been a black box.
With DTrace you can begin to open up that black box and understand what
is going on. This chapter focuses on debugging virtual machines that
utilize extensions to the x86 instruction set architecture and assumes
some familiarity with hardware virtual machine architecture.
</para>
<sect1 xml:id="chp-vms-defs">
<title>Virtualization Background</title>

<para>In this chapter various terms have specific meanings that they
don't in other contexts. These terms are:</para>
<itemizedlist>
	<listitem>
		<para><literal>host</literal> refers to the operating system that is doing the virtualization.</para>
	</listitem>
	<listitem>
		<para><literal>guest</literal> refers to the operating system instance that is being subject
		to virtualization.</para>
	</listitem>
	<listitem>
		<para><literal>Virtual Machine Monitor</literal> (VMM) refers to the piece of software that
		runs inside of the host operating system and provides the virtualization framework for guest
		operating systems. It is composed of both a kernel module and a user land process. The VMM is
		responsible for emulating hardware such as the i8254, i8259, PCI buses, Ethernet and disk
		controllers.</para>
	</listitem>
	<listitem>
		<para><literal>Virtual CPU</literal> (vCPU) refers to a virtualized instance of a CPU that the
		guest operating system is exposed to and interacts with.</para>
	</listitem>
	<listitem>
		<para><literal>Virtual Machine Control Structure</literal> (VMCS) is a structure that
		describes the operation of a virtual machine.  There is one VMCS per logical processor per
		guest.</para>
	</listitem>
</itemizedlist>
</sect1>

<sect1 xml:id="chp-vms-targs">
<title><literal>vmregs[]</literal> Array</title>

<para>The <literal>vmregs[]</literal> array enables you to access the
registers of the currently active VMCS. These registers allow you to see
the guest virtual machine state. The following tables list a subset of
the indices into the <literal>vmregs[]</literal> array corresponding to
each of the supported CPU architecture extensions. The full list is
available in <filename>/usr/lib/dtrace/regs.d</filename>.</para>

<table frame="topbot" xml:id="chp-user-tbl-uregs-intel">
<title>Intel VMX <literal>vmregs[]</literal> Constants</title>
<tgroup cols="2" colsep="0" rowsep="0">
	<colspec colname="colspec0" colwidth="" />
	<colspec colname="colspec1" colwidth="" />
	<thead>
		<row rowsep="1">
			<entry><para>Constant</para></entry>
			<entry><para>Register</para></entry>
		</row>
	</thead>
	<tbody>
		<row>
			<entry><para><literal>VMX_GUEST_CR0</literal></para></entry>
			<entry><para><literal>%cr0</literal></para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_CR3</literal></para></entry>
			<entry><para><literal>%cr3</literal></para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_CR4</literal></para></entry>
			<entry><para><literal>%cr4</literal></para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_RSP</literal></para></entry>
			<entry><para><literal>%rsp</literal></para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_RIP</literal></para></entry>
			<entry><para><literal>%rip</literal></para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_RFLAGS</literal></para></entry>
			<entry><para><literal>%rflags</literal></para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_CS_BASE</literal></para></entry>
			<entry><para><literal>%es</literal> base</para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_DS_BASE</literal></para></entry>
			<entry><para><literal>%es</literal> base</para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_ES_BASE</literal></para></entry>
			<entry><para><literal>%es</literal> base</para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_FS_BASE</literal></para></entry>
			<entry><para><literal>%es</literal> base</para></entry>
		</row>
		<row>
			<entry><para><literal>VMX_GUEST_GS_BASE</literal></para></entry>
			<entry><para><literal>%es</literal> base</para></entry>
		</row>
	</tbody>
</tgroup>
</table>

<para>The <literal>vmregs[]</literal> can be combined with other
providers to provide insight into what a guest virtual machine without
having to access it. The following script profiles what is running on a
per-guest basis using the value of <literal>%cr3</literal>. On x86
systems, that register contains the root of the page table and thus is
unique on a per-process basis.</para>

<programlisting>
profile-97hz
/execname == "qemu-kvm"/
{
	@[pid, vmregs[VMX_GUEST_CR3]] = count();
}

tick-10s
{
	printa("%05d 0x%x %@d\n", @);
	exit(0);
}
</programlisting>

<para>Running this yields the following output:
</para>

<screen>65197 0xffffff02d5ed3000 1
65197 0xffffff02d5ee7000 2
65197 0x77bda000 896</screen>

<para>Looking at output like this indicate to us that we primarily had
one process that was accessing running on CPU inside of the guest during
the ten second windows.</para>

</sect1>

</chapter>
