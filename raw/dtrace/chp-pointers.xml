<chapter xml:id="chp-pointers">
<title>Pointers and Arrays</title>
<para><phrase role="first-word">Pointers are memory addresses</phrase> of data
objects in the operating system kernel or in the address space of a user
process. D provides the ability to create and manipulate pointers and store them
in variables and associative arrays. This chapter describes the D syntax for
pointers, operators that can be applied to create or access pointers, and the
relationship between pointers and fixed-size scalar arrays. Also discussed are
issues relating to the use of pointers in different address spaces.</para>
<note><para>If you are an experienced C or C++ programmer, you can skim most
of this chapter as the D pointer syntax is the same as the corresponding ANSI-C
syntax. You should read <xref linkend="chp-pointers-8" /> and <xref linkend="chp-pointers-9" />
as they describe features and issues specific to DTrace.</para></note>
<sect1 xml:id="chp-pointers-1">
<title>Pointers and Addresses</title>
<para><indexterm><primary>virtual memory</primary></indexterm><indexterm><primary>pointers</primary></indexterm><indexterm><primary>memory addresses</primary></indexterm>The illumos Operating System uses a technique called <firstterm>virtual memory</firstterm> to provide each user process with its own virtual view of the memory resources on your system. A virtual view on memory resources is referred to as an <firstterm>address space</firstterm>, which associates a range of address values (either <literal>[0 ... 0xffffffff]</literal> for a 32-bit address space or <literal>[0 ... 0xffffffffffffffff]</literal> for a 64-bit address space) with a set of translations that the operating system and hardware use to convert each virtual address to a corresponding physical memory location. Pointers in D are data objects that store an integer virtual address value and associate it with a D type that describes the format of the data stored at the corresponding memory location.</para>
<para><indexterm><primary>pointers</primary><secondary>declaring</secondary></indexterm>You can declare a D variable to be of pointer type by first specifying the type of the referenced data and then appending an asterisk (<literal>*</literal>) to the type name to indicate you want to declare a pointer type. For example, the declaration:</para>
<programlisting>int *p;</programlisting>
<para>declares a D global variable named <literal>p</literal> that is a pointer to an integer. This declaration means that <literal>p</literal> itself is an integer of size 32 or 64-bits whose value is the address of another integer located somewhere in memory. Because the compiled form of your D code is executed at probe firing time inside the operating system kernel itself, D pointers are typically pointers associated with the kernel's address space. You can use the <citerefentry><refentrytitle>isainfo</refentrytitle><manvolnum>1</manvolnum></citerefentry> <option>b</option> command to determine the number of bits used for pointers by the active operating system kernel.</para>
<para>If you want to create a pointer to a data object inside of the kernel, you can compute its address using the <literal>&amp;</literal> operator. For example, the operating system kernel source code declares an <literal>int kmem_flags</literal> tunable. You could trace the address of this <literal>int</literal> by tracing the result of applying the <literal>&amp;</literal> operator to the name of that object in D:</para>
<programlisting>trace(&amp;`kmem_flags);</programlisting>
<para>The <literal>*</literal> operator can be used to refer to the object addressed by the pointer, and acts as the inverse of the <literal>&amp;</literal> operator. For example, the following two D code fragments are equivalent in meaning:</para>
<programlisting>p = &amp;`kmem_flags;
trace(*p);

trace(`kmem_flags);
</programlisting>
<para>The left-hand fragment creates a D global variable pointer <literal>p</literal>. Because the <literal>kmem_flags</literal> object is of type <literal>int</literal>, the type of the result of <literal>&amp;`kmem_flags</literal> is <literal>int *</literal> (that is, pointer to <literal>int</literal>). The left-hand fragment traces the value of <literal>*p</literal>, which follows the pointer back to the data object <literal>kmem_flags</literal>. This fragment is therefore the same as the right-hand fragment, which simply traces the value of the data object directly using its name.</para>
</sect1>
<sect1 xml:id="chp-pointers-2">
<title>Pointer Safety</title>
<para><indexterm><primary>pointers</primary><secondary>safe use of</secondary></indexterm>If you are a C or C++ programmer, you may be a bit frightened after reading the previous section because you know that misuse of pointers in your programs can cause your programs to crash. DTrace is a robust, safe environment for executing your D programs where these mistakes cannot cause program crashes. You may indeed write a buggy D program, but invalid D pointer accesses will not cause DTrace or the operating system kernel to fail or crash in any way. Instead, the DTrace software will detect any invalid pointer accesses, disable your instrumentation, and report the problem back to you for debugging.</para>
<para>If you have programmed in the Java programming language, you probably know that the Java language does not support pointers for precisely the same reasons of safety. Pointers are needed in D because they are an intrinsic part of the operating system's implementation in C, but DTrace implements the same kind of safety mechanisms found in the Java programming language that prevent buggy programs from damaging themselves or each other. DTrace's error reporting is similar to the run-time environment for the Java programming language that detects a programming error and reports an exception back to you.</para>
<para>To see DTrace's error handling and reporting, write a deliberately bad D program using pointers. In an editor, type the following D program and save it in a file named <filename>badptr.d</filename>:</para>
<example xml:id="ex-badptr.d">
<title><filename>badptr.d</filename>: Demonstration of DTrace Error Handling</title>
<programlisting>BEGIN
{
	x = (int *)NULL;
	y = *x;
	trace(y);
}</programlisting>
</example>
<para>The <filename>badptr.d</filename> program creates a D pointer named <literal>x</literal> that is a pointer to <literal>int</literal>. The program assigns this pointer the special invalid pointer value <literal>NULL</literal>, which is a built-in alias for address 0. By convention, address 0 is always defined to be invalid so that <literal>NULL</literal> can be used as a sentinel value in C and D programs. The program uses a cast expression to convert <literal>NULL</literal> to be a pointer to an integer. The program then dereferences the pointer using the expression <literal>*x</literal>, and assigns the result to another variable <literal>y</literal>, and then attempts to trace <literal>y</literal>. When the D program is executed, DTrace detects an invalid pointer access when the statement <literal>y = *x</literal> is executed and reports the error:</para>
<screen><userinput># dtrace -s badptr.d</userinput>
dtrace: script '/dev/stdin' matched 1 probe
CPU     ID                    FUNCTION:NAME
dtrace: error on enabled probe ID 1 (ID 1: dtrace:::BEGIN): invalid address
(0x0) in action #2 at DIF offset 4
dtrace: 1 error on CPU 0
<userinput>^C</userinput>
#</screen>
<para>The other problem that can arise from programs that use invalid pointers is an <firstterm>alignment error</firstterm>. By architectural convention, fundamental data objects such as integers are aligned in memory according to their size. For example, 2-byte integers are aligned on addresses that are multiples of 2, 4-byte integers on multiples of 4, and so on. If you dereference a pointer to a 4-byte integer and your pointer address is an invalid value that is not a multiple of 4, your access will fail with an alignment error. Alignment errors in D almost always indicate that your pointer has an invalid or corrupt value due to a bug in your D program. You can create an example alignment error by changing the source code of <filename>badptr.d</filename> to use the address <literal>(int *)2</literal> instead of <literal>NULL</literal>. Because <literal>int</literal> is 4 bytes and 2 is not a multiple of 4, the expression <literal>*x</literal> results in a DTrace alignment error.</para>
<para>For details about the DTrace error mechanism, see <xref linkend="chp-dtrace-error" />.</para>
</sect1>
<sect1 xml:id="chp-pointers-3">
<title>Array Declarations and Storage</title>
<para><indexterm><primary>scalar arrays</primary></indexterm>D provides support for <firstterm>scalar arrays</firstterm> in addition to the dynamic associative arrays described in Chapter 3. Scalar arrays are a fixed-length group of consecutive memory locations that each store a value of the same type. Scalar arrays are accessed by referring to each location with an integer starting from zero. Scalar arrays correspond directly in concept and syntax with arrays in C and C++. Scalar arrays are not used as frequently in D as associative arrays and their more advanced counterparts <firstterm>aggregations</firstterm>, but these are sometimes needed when accessing existing operating system array data structures declared in C. Aggregations are described in <xref linkend="chp-aggs" />.</para>
<para>A D scalar array of 5 integers would be declared by using the type <literal>int</literal> and suffixing the declaration with the number of elements in square brackets as follows:</para>
<programlisting>int a[5];</programlisting>
<para>The following diagram shows a visual representation of the array storage:</para>
<figure xml:id="fig-array">
<title>Scalar Array Representation</title>
<mediaobject>
	<imageobject><imagedata fileref="figures/array" scale="75" /></imageobject>
	<textobject><simpara>Diagram shows a picture of an array of five objects.</simpara></textobject>
</mediaobject>
</figure>
<para>The D expression <literal>a[0]</literal> is used to refer to the first array element, <literal>a[1]</literal> refers to the second, and so on. From a syntactic perspective, scalar arrays and associative arrays are very similar. You can declare an associative array of five integers referenced by an integer key as follows:</para>
<programlisting>int a[int];</programlisting>
<para>and also reference this array using the expression
<literal>a[0]</literal>. But from a storage and implementation perspective, the
two arrays are very different. The static array <literal>a</literal> consists of
five consecutive memory locations numbered from zero and the index refers to an
offset in the storage allocated for the array. An associative array, on the
other hand, has no predefined size and does not store elements in consecutive
memory locations. In addition, associative array keys have no relationship to
the corresponding value storage location. You can access associative array
elements <literal>a[0]</literal> and <literal>a[-5]</literal> and only two words
of storage will be allocated by DTrace which may or may not be consecutive.
Associative array keys are abstract names for the corresponding value that have
no relationship to the value storage locations.</para>
<para>If you create an array using an initial assignment and use a single
integer expression as the array index (for example, <literal>a[0] = 2</literal>),
the D compiler will always create a new associative array, even
though in this expression <literal>a</literal> could also be interpreted as an
assignment to a scalar array. Scalar arrays must be predeclared in this
situation so that the D compiler can see the definition of the array size and
infer that the array is a scalar array.</para>
</sect1>
<sect1 xml:id="chp-pointers-4">
<title>Pointer and Array Relationship</title>
<para>
<indexterm><primary>pointers</primary><secondary>and arrays</secondary></indexterm>
<indexterm><primary>arrays</primary><secondary>and pointers</secondary></indexterm>
Pointers and arrays have a special relationship in D, just as they do in ANSI-C.
An array is represented by a variable that is associated with the address of its
first storage location. A pointer is also the address of a storage location with
a defined type, so D permits the use of the array [ ] index notation with both
pointer variables and array variables. For example, the following two D
fragments are equivalent in meaning:</para>
<programlisting>p = &amp;a[0];
trace(p[2]);

trace(a[2]);
</programlisting>
<para>In the left-hand fragment, the pointer <literal>p</literal> is assigned to
the address of the first array element in <literal>a</literal> by applying the
<literal>&amp;</literal> operator to the expression <literal>a[0]</literal>. The
expression <literal>p[2]</literal> traces the value of the third array element
(index 2). Because <literal>p</literal> now contains the same address associated
with <literal>a</literal>, this expression yields the same value as
<literal>a[2]</literal>, shown in the right-hand fragment. One consequence of
this equivalence is that C and D permit you to access any index of any pointer
or array. Array bounds checking is not performed for you by the compiler or
DTrace runtime environment. If you access memory beyond the end of an array's
predefined value, you will either get an unexpected result or DTrace will report
an invalid address error, as shown in the previous example. As always, you can't
damage DTrace itself or your operating system, but you will need to debug your D
program.</para>
<para>The difference between pointers and arrays is that a pointer variable
refers to a separate piece of storage that contains the integer address of some
other storage. An array variable names the array storage itself, not the
location of an integer that in turn contains the location of the array. This
difference is illustrated in the following diagram:</para>
<figure xml:id="fig-ptrarr">
<title>Pointer and Array Storage</title>
<mediaobject>
	<imageobject><imagedata fileref="figures/arrptr" scale="75" /></imageobject>
	<textobject><simpara>Diagram shows a pointer to an array of five objects.</simpara></textobject>
</mediaobject>
</figure>
<para>This difference is manifested in the D syntax if you attempt to assign
pointers and scalar arrays. If <literal>x</literal> and <literal>y</literal> are
pointer variables, the expression <literal>x = y</literal> is legal; it simply
copies the pointer address in <literal>y</literal> to the storage location named
by <literal>x</literal>. If <literal>x</literal> and <literal>y</literal> are
scalar array variables, the expression <literal>x = y</literal> is not legal.
Arrays may not be assigned as a whole in D. However, an array variable or symbol
name can be used in any context where a pointer is permitted. If
<literal>p</literal> is a pointer and <literal>a</literal> is an array, the
statement <literal>p = a</literal> is permitted; this statement is equivalent to
the statement <literal>p = &amp;a[0]</literal>.</para>
</sect1>
<sect1 xml:id="chp-pointers-5">
<title>Pointer Arithmetic</title>
<para><indexterm><primary>pointers</primary><secondary>arithmetic operations on</secondary></indexterm>Since pointers are just integers used as addresses of other objects in memory, D provides a set of features for performing arithmetic on pointers. However, pointer arithmetic is not identical to integer arithmetic. Pointer arithmetic implicitly adjusts the underlying address by multiplying or dividing the operands by the size of the type referenced by the pointer. The following D fragment illustrates this property:</para>
<programlisting>int *x;

BEGIN
{
	trace(x);
	trace(x + 1);
	trace(x + 2);
}</programlisting>
<para>This fragment creates an integer pointer <literal>x</literal> and then
trace its value, its value incremented by one, and its value incremented by two.
If you create and execute this program, DTrace reports the integer values 0, 4,
and 8.</para>
<para>Since <literal>x</literal> is a pointer to an int (size 4 bytes),
incrementing <literal>x</literal> adds 4 to the underlying pointer value. This
property is useful when using pointers to refer to consecutive storage locations
such as arrays. For example, if <literal>x</literal> were assigned to the
address of an array <literal>a</literal> like the one shown in
<xref linkend="fig-ptrarr" />, the expression <literal>x + 1</literal> would be
equivalent to the expression <literal>&amp;a[1]</literal>. Similarly, the
expression <literal>*(x + 1)</literal> would refer to the value
<literal>a[1]</literal>. Pointer arithmetic is implemented by the D compiler
whenever a pointer value is incremented using the <literal>+=</literal>,
<literal>+</literal>, or <literal>++</literal> operators.</para>
<para>Pointer arithmetic is also applied when an integer is subtracted from a
pointer on the left-hand side, when a pointer is subtracted from another
pointer, or when the <literal>--</literal> operator is applied to a pointer. For
example, the following D program would trace the result 2:</para>
<programlisting>int *x, *y;
int a[5];

BEGIN
{
	x = &amp;a[0];
	y = &amp;a[2];
	trace(y - x);
}</programlisting>
</sect1>
<sect1 xml:id="chp-pointers-6">
<title>Generic Pointers</title>
<para>Sometimes it is useful to represent or manipulate a generic pointer address in a D program without specifying the type of data referred to by the pointer. Generic pointers can be specified using the type <literal>void *</literal>, where the keyword <literal>void</literal> represents the absence of specific type information, or using the built-in type alias <literal>uintptr_t</literal> which is aliased to an unsigned integer type of size appropriate for a pointer in the current data model. You may not apply pointer arithmetic to an object of type <literal>void *</literal>, and these pointers cannot be dereferenced without casting them to another type first. You can cast a pointer to the <literal>uintptr_t</literal> type when you need to perform integer arithmetic on the pointer value.</para>
<para><indexterm><primary>pointers</primary><secondary>and type conversion</secondary></indexterm><indexterm><primary>pointers</primary><secondary>and explicit casts</secondary></indexterm>Pointers to <literal>void</literal> may be used in any context where a pointer to another data type is required, such as an associative array tuple expression or the right-hand side of an assignment statement. Similarly, a pointer to any data type may be used in a context where a pointer to <literal>void</literal> is required. To use a pointer to a non-<literal>void</literal> type in place of another non-<literal>void</literal> pointer type, an explicit cast is required. You must always use explicit casts to convert pointers to integer types such as <literal>uintptr_t</literal>, or to convert these integers back to the appropriate pointer type.</para>
</sect1>
<sect1 xml:id="chp-pointers-7">
<title>Multi-Dimensional Arrays</title>
<para>Multi-dimensional scalar arrays are used infrequently in D, but are provided for compatibility with ANSI-C and for observing and accessing operating system data structures created using this capability in C. A multi-dimensional array is declared as a consecutive series of scalar array sizes enclosed in square brackets <literal>[ ]</literal> following the base type. For example, to declare a fixed-size two-dimensional rectangular array of integers of dimensions 12 rows by 34 columns, you would write the declaration:</para>
<programlisting>int a[12][34];</programlisting>
<para><indexterm><primary>multi-dimensional scalar arrays</primary></indexterm><indexterm><primary>arrays</primary><secondary>multi-dimensional scalar</secondary></indexterm>A multi-dimensional scalar array is accessed using similar notation. For example, to access the value stored at row 0 column 1 you would write the D expression:</para>
<programlisting>a[0][1]</programlisting>
<para>Storage locations for multi-dimensional scalar array values are computed by multiplying the row number by the total number of columns declared, and then adding the column number.</para>
<para>You should be careful not to confuse the multi-dimensional array syntax with the D syntax for associative array accesses (that is, <literal>a[0][1]</literal> is not the same as <literal>a[0, 1]</literal>). If you use an incompatible tuple with an associative array or attempt an associative array access of a scalar array, the D compiler will report an appropriate error message and refuse to compile your program.</para>
</sect1>
<sect1 xml:id="chp-pointers-8">
<title>Pointers to DTrace Objects</title>
<para><indexterm><primary>pointers</primary><secondary>to DTrace objects</secondary></indexterm>The D compiler prohibits you from using the <literal>&amp;</literal> operator to obtain pointers to DTrace objects such as associative arrays, built-in functions, and variables. You are prohibited from obtaining the address of these variables so that the DTrace runtime environment is free to relocate them as needed between probe firings in order to more efficiently manage the memory required for your programs. If you create composite structures, it is possible to construct expressions that do retrieve the kernel address of your DTrace object storage. You should avoid creating such expressions in your D programs. If you need to use such an expression, be sure not to cache the address across probe firings.</para>
<para><indexterm><primary>D programming language</primary><secondary>differences from ANSI-C</secondary></indexterm>In ANSI-C, pointers can also be used to perform indirect function calls or to perform assignments, such as placing an expression using the unary <literal>*</literal> dereference operator on the left-hand side of an assignment operator. In D, these types of expressions using pointers are not permitted. You may only assign values directly to D variables using their name or by applying the array index operator <literal>[]</literal> to a D scalar or associative array. You may only call functions defined by the DTrace environment by name as specified in <xref linkend="chp-actsub" />. Indirect function calls using pointers are not permitted in D.</para>
</sect1>
<sect1 xml:id="chp-pointers-9">
<title>Pointers and Address Spaces</title>
<para>A pointer is an address that provides a translation within some <firstterm>virtual address space</firstterm> to a piece of physical memory. DTrace executes your D programs within the address space of the operating system kernel itself. Your entire illumos system manages many address spaces: one for the operating system kernel, and one for each user process. Since each address space provides the illusion that it can access all of the memory on the system, the same virtual address pointer value can be reused across address spaces but translate to different physical memory. Therefore, when writing D programs that use pointers, you must be aware of the address space corresponding to the pointers you intend to use.</para>
<para>For example, if you use the <literal>syscall</literal> provider to instrument entry to a system call that takes a pointer to an integer or array of integers as an argument (for example, <citerefentry><refentrytitle>pipe</refentrytitle><manvolnum>2</manvolnum></citerefentry>), it would not be valid to dereference that pointer or array using the <literal>*</literal> or <literal>[]</literal> operators because the address in question is an address in the address space of the user process that performed the system call. Applying the <literal>*</literal> or <literal>[]</literal> operators to this address in D would result in a kernel address space access, which would result in an invalid address error or in returning unexpected data to your D program depending upon whether the address happened to match a valid kernel address.</para>
<para><indexterm><primary>user process memory</primary></indexterm>To access user process memory from a DTrace probe, you must apply one of the <function>copyin</function>, <function>copyinstr</function>, or <function>copyinto</function> functions described in <xref linkend="chp-actsub" /> to the user address space pointer. Take care when writing your D programs to name and comment variables storing user addresses appropriately to avoid confusion. You can also store user addresses as <literal>uintptr_t</literal> so you don't accidentally compile D code that dereferences them. Techniques for using DTrace on user processes are described in <xref linkend="chp-user" />.</para>
</sect1>
</chapter>
