<chapter xml:id="chp-strings">
<title>Strings</title>
<para><phrase role="first-word">DTrace provides support</phrase> for tracing and
manipulating strings. This chapter describes the complete set of D language
features for declaring and manipulating strings. Unlike ANSI-C, strings in D
have their own built-in type and operator support so you can easily and
unambiguously use them in your tracing programs.</para>
<sect1 xml:id="chp-strings-1">
<title>String Representation</title>
<para><indexterm><primary>strings</primary></indexterm>Strings are represented in DTrace as an array of characters terminated by a null byte (that is, a byte whose value is zero, usually written as <literal>'\0'</literal>). The visible part of the string is of variable length, depending on the location of the null byte, but DTrace stores each string in a fixed-size array so that each probe traces a consistent amount of data. Strings may not exceed the length of this predefined string limit, but the limit can be modified in your D program or on the <command>dtrace</command> command line by tuning the <literal>strsize</literal> option. Refer to <xref linkend="chp-opt" /> for more information on tunable DTrace options. The default string limit is 256 bytes.</para>
<para><indexterm><primary>strings</primary><secondary>type</secondary></indexterm>The D language provides an explicit <literal>string</literal> type rather than using the type <literal>char *</literal> to refer to strings. The <literal>string</literal> type is equivalent to a <literal>char *</literal> in that it is the address of a sequence of characters, but the D compiler and D functions like <function>trace</function> provide enhanced capabilities when applied to expressions of type <literal>string</literal>. For example, the string type removes the ambiguity of the type <literal>char *</literal> when you need to trace the actual bytes of a string. In the D statement:</para>
<programlisting>trace(s);</programlisting>
<para>if <literal>s</literal> is of type <literal>char *</literal>, DTrace will trace the value of the pointer <literal>s</literal> (that is, it will trace an integer address value). In the D statement:</para>
<programlisting>trace(*s);</programlisting>
<para>by definition of the <literal>*</literal> operator, the D compiler will dereference the pointer <literal>s</literal> and trace the single character at that location. These behaviors are essential to permitting you to manipulate character pointers that by design refer to either single characters, or to arrays of byte-sized integers that are not strings and do not end with a null byte. In the D statement:</para>
<programlisting>trace(s);</programlisting>
<para>if <literal>s</literal> is of type <literal>string</literal>, the <literal>string</literal> type indicates to the D compiler that you want DTrace to trace a null terminated string of characters whose address is stored in the variable <literal>s</literal>. You can also perform lexical comparison of expressions of type <literal>string</literal>, as described in <xref linkend="chp-strings-5" />.</para>
</sect1>
<sect1 xml:id="chp-strings-2">
<title>String Constants</title>
<para><indexterm><primary>string constants</primary></indexterm>String constants are enclosed in double quotes (<literal>"</literal>) and are automatically assigned the type <literal>string</literal> by the D compiler. You can define string constants of any length, limited only by the amount of memory DTrace is permitted to consume on your system. The terminating null byte (<literal>\0</literal>) is added automatically by the D compiler to any string constants that you declare. The size of a string constant object is the number of bytes associated with the string plus one additional byte for the terminating null byte.</para>
<para>A string constant may not contain a literal newline character. To create strings containing newlines, use the <literal>\n</literal> escape sequence instead of a literal newline. String constants may also contain any of the special character escape sequences defined for character constants in <xref linkend="tbl-escs" />.</para>
</sect1>
<sect1 xml:id="chp-strings-3">
<title>String Assignment</title>
<para><indexterm><primary>strings</primary><secondary>assignment</secondary></indexterm>Unlike assignment of <literal>char *</literal> variables, strings are copied by value, not by reference. String assignment is performed using the <literal>=</literal> operator and copies the actual bytes of the string from the source operand up to and including the null byte to the variable on the left-hand side, which must be of type <literal>string</literal>. You can create a new variable of type <literal>string</literal> by assigning it an expression of type <literal>string</literal>. For example, the D statement:</para>
<programlisting>s = "hello";</programlisting>
<para>would create a new variable <literal>s</literal> of type <literal>string</literal> and copy the 6 bytes of the string <literal>"hello"</literal> into it (5 printable characters plus the null byte). String assignment is analogous to the C library function <citerefentry><refentrytitle>strcpy</refentrytitle><manvolnum>3C</manvolnum></citerefentry>, except that if the source string exceeds the limit of the storage of the destination string, the resulting string is automatically truncated at this limit.</para><para>You can also assign to a string variable an expression of a type that is compatible with strings. In this case, the D compiler automatically promotes the source expression to the string type and performs a string assignment. The D compiler permits any expression of type <literal>char *</literal> or of type <literal>char[</literal><replaceable>n</replaceable><literal>]</literal> (that is, a scalar array of <literal>char</literal> of any size), to be promoted to a <literal>string</literal>.</para>
</sect1>
<sect1 xml:id="chp-strings-4">
<title>String Conversion</title>
<para><indexterm><primary>strings</primary><secondary>conversion</secondary></indexterm>Expressions of other types may be explicitly converted to type <literal>string</literal> by using a cast expression or by applying the special <literal>stringof</literal> operator, which are equivalent in meaning:</para>
<programlisting>s = (string) <replaceable>expression</replaceable>				s = stringof ( <replaceable>expression</replaceable> )</programlisting>
<para>The <literal>stringof</literal> operator binds very tightly to the operand on its right-hand side. Typically, parentheses are used to surround the expression for clarity, although they are not strictly necessary.</para>
<para>Any expression that is a scalar type such as a pointer or integer or a scalar array address may be converted to string. Expressions of other types such as <literal>void</literal> may not be converted to <literal>string</literal>. If you erroneously convert an invalid address to a string, the DTrace safety features will prevent you from damaging the system or DTrace, but you might end up tracing a sequence of undecipherable characters.</para>
</sect1>
<sect1 xml:id="chp-strings-5">
<title>String Comparison</title>
<para><indexterm><primary>strings</primary><secondary>relational operators</secondary></indexterm><indexterm><primary>operator overloading</primary></indexterm><indexterm><primary>strings</primary><secondary>comparison</secondary></indexterm><indexterm><primary>strings</primary><secondary>and operator overloading</secondary></indexterm>D overloads the binary relational operators and permits them to be used for string comparisons as well as integer comparisons. The relational operators perform string comparison whenever both operands are of type <literal>string</literal>, or when one operand is of type <literal>string</literal> and the other operand can be promoted to type <literal>string</literal>, as described in <xref linkend="chp-strings-3" />. All of the relational operators can be used to compare strings:</para>
<table frame="topbot" xml:id="tbl-strops">
<title>D Relational Operators for Strings</title>
<tgroup cols="2" colsep="0" rowsep="0">
	<colspec colname="colspec5" colwidth="0.50in" />
	<colspec colname="colspec6" colwidth="4.00in" />
	<tbody>
		<row>
			<entry colname="colspec5"><para><literal>&lt;</literal></para></entry>
			<entry colname="colspec6"><para>left-hand operand is less than right-operand</para></entry>
		</row>
		<row>
			<entry colname="colspec5"><para><literal>&lt;=</literal></para></entry>
			<entry colname="colspec6"><para>left-hand operand is less than or equal to right-hand operand</para></entry>
		</row>
		<row>
			<entry colname="colspec5"><para><literal>&gt;</literal></para></entry>
			<entry colname="colspec6"><para>left-hand operand is greater than right-hand operand</para></entry>
		</row>
		<row>
			<entry colname="colspec5"><para><literal>&gt;=</literal></para></entry>
			<entry colname="colspec6"><para>left-hand operand is greater than or equal to right-hand operand</para></entry>
		</row>
		<row>
			<entry colname="colspec5"><para><literal>==</literal></para></entry>
			<entry colname="colspec6"><para>left-hand operand is equal to right-hand operand</para></entry>
		</row>
		<row>
			<entry colname="colspec5"><para><literal>!=</literal></para></entry>
			<entry colname="colspec6"><para>left-hand operand is not equal to right-hand operand</para></entry>
		</row>
	</tbody>
</tgroup>
</table>
<para>As with integers, each operator evaluates to a value of type <literal>int</literal> which is
equal to one if the condition is true, or zero if it is false.</para>
<para>The relational operators compare the two input strings byte-by-byte, similar to the C library
routine <citerefentry><refentrytitle>strcmp</refentrytitle><manvolnum>3C</manvolnum></citerefentry>.
Each byte is compared using its corresponding integer value in the ASCII character set, as shown in
<citerefentry><refentrytitle>ascii</refentrytitle><manvolnum>5</manvolnum></citerefentry>, until a
null byte is read or the maximum string length is reached. Some example D string comparisons and
their results are:</para>
<informaltable frame="none">
	<tgroup cols="2" colsep="0" rowsep="0">
		<colspec colwidth="" />
		<colspec colwidth="" />
		<tbody>
			<row>
				<entry><para><literal>"coffee" &lt; "espresso"</literal></para></entry>
				<entry><para>... returns 1 (true)</para></entry>
			</row>
			<row>
				<entry><para><literal>"coffee" == "coffee"</literal></para></entry>
				<entry><para>... returns 1 (true)</para></entry>
			</row>
			<row>
				<entry><para><literal>"coffee" &gt;= "mocha"</literal></para></entry>
				<entry><para>... returns 0 (false)</para></entry>
			</row>
		</tbody>
	</tgroup>
</informaltable>
</sect1>
</chapter>
